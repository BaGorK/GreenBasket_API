// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  first_name      String
  last_name       String
  email           String
  phone_number    String      @unique
  password        String
  profile_picture String?
  role            user_role   @default(CUSTOMER)
  status          user_status @default(ACTIVE)

  // user may or may not be a vendor
  vendor  Vendor?
  // one user many addresses
  address Address[]
  // one user may have many orders
  orders  Order[]
}

model Vendor {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  business_name  String
  business_email String        @unique
  phone_number   String        @unique
  logo_url       String?
  status         vendor_status @default(PENDING)

  // user may or may not be a vendor
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  // one vendor many addresses
  address  Address[]
  // one vendor many products
  products Product[]
  // one vendor may have many orders
  orders   Order[]
}

model Address {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  street     String
  city       String
  zip_code   String
  country    String
  latitude   String
  longitude  String
  is_default Boolean      @default(false)
  type       address_type

  // one user many addresses
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  // one vendor many addresses
  Vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId String?
  Order    Order[]
}

model Category {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name      String
  slug      String          @unique
  image_url String?
  status    category_status @default(ACTIVE)

  // many to many relation product - category
  products Product[]
  // TODO: parent_id uuid [null, note: "For subcategories (e.g., \"Citrus\" under \"Fruits\")."]
}

model Product {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name           String
  description    String
  price          Decimal
  descount_price Decimal?       @default(0)
  unit           String
  stock          Decimal
  image_url      String
  status         product_status @default(ACTIVE)

  // one vendor many products
  Vendor      Vendor        @relation(fields: [vendorId], references: [id])
  vendorId    String
  // many to many relation product - category
  categories  Category[]
  Order_Items Order_Items[]
}

model Order {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  total_price Decimal
  status      order_status @default(PENDING)

  // one order may have many order items
  OrderItems Order_Items[]
  Payment    Payment?
  // one user may have many orders
  User       User          @relation(fields: [userId], references: [id])
  userId     String
  // one vendor may have many orders
  Vendor     Vendor        @relation(fields: [vendorId], references: [id])
  vendorId   String
  // Shipping/delivery address. it should be one of the customers address else the default customer address
  Adress     Address       @relation(fields: [addressId], references: [id])
  addressId  String
}

model Order_Items {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Price per unit at purchase time.
  price     Decimal
  // Number of units ordered.
  quantity  Decimal
  // price * quantity.
  sub_total Decimal

  // one order may have many order items
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  // one order item will have one product
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Payment {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  amount Decimal
  status payment_status @default(PENDING)

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

enum user_role {
  ADMIN
  CUSTOMER
  VENDOR
}

enum user_status {
  ACTIVE
  INACTIVE
  BANNED
  DELETED
}

enum vendor_status {
  PENDING
  APPROVED
  SUSPENDED
}

enum address_type {
  BUSINESS
  SHIPPING
}

enum category_status {
  ACTIVE
  INACTIVE
}

enum product_status {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum order_status {
  // Order has been placed but not yet processed
  PENDING
  // Order has been confirmed by the vendor
  CONFIRMED
  // Order has been shipped to the customer
  SHIPPED
  // Order has been successfully delivered
  DELIVERED
  // Order was canceled before fulfillment
  CANCELLED
  // Customer returned the order
  RETURNED
  // Payment has been refunded
  REFUNDED
}

enum payment_status {
  PENDING
  PAID
}
