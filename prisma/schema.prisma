// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  first_name                      String?
  last_name                       String?
  // incase users dont have an email address
  email                           String
  phone_number                    String                  @unique
  password                        String
  date_of_birth                   DateTime?
  gender                          Gender?
  profile_picture                 String?
  role                            UserRole                @default(CUSTOMER)
  status                          UserStatus              @default(ACTIVE)
  authProvider                    AuthProvider            @default(EMAIL)
  is_onboarding                   Boolean                 @default(true)
  // this field is true when admin create a user. user should set his own password.
  need_reset_password             Boolean                 @default(false)
  idPhoto_front                   String?
  idPhoto_back                    String?
  verify_status                   UserAccountVerifyStatus @default(UNVERIFIED)
  reset_password_token            String?
  reset_password_token_expires_at DateTime?

  // user may or may not be a vendor
  vendor  Vendor?
  // one user have one default addresses
  address Address?

  // one user may have many orders
  orders Order[]
  // one user may have many orders
  cart   Cart[]
  Review Review[]
}

enum Gender {
  male
  female
}

model Vendor {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  business_name     String
  business_email    String       @unique
  phone_number      String       @unique
  logo_url          String?
  status            VendorStatus @default(PENDING)
  have_bank_details Boolean      @default(false)

  // user may or may not be a vendor
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  // one vendor many addresses
  address           Address[]
  // one vendor many products
  products          Product[]
  // one vendor may have many orders
  orders            Order[]
  VendorBankAccount VendorBankAccount?
  VendorBalance     VendorBalance?
}

model VendorBankAccount {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account_name   String
  account_number String
  bank_name      String
  // bank_code      String
  currency       String @default("ETB")
  // status         AccountStatus @default(ACTIVE)
  // branch_name    String?
  // swift_code     String?
  // is_default     Boolean       @default(false)
  // is_verified    Boolean       @default(false)
  // last_used_at   DateTime?
  // verification_documents String[]
  // verified_at            DateTime?
  // verified_by            String? // Admin user ID who verified the account

  // One-to-one relation with Vendor
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @unique

  @@index([vendorId])
}

model VendorBalance {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Total amount earned from all successful orders
  total_earnings      Decimal @default(0) @db.Decimal(10, 2)
  // Amount available for withdrawal (total_earnings - pending_withdrawals - withdrawn_amount)
  available_balance   Decimal @default(0) @db.Decimal(10, 2)
  // Total amount withdrawn so far
  withdrawn_amount    Decimal @default(0) @db.Decimal(10, 2)
  // Amount in pending withdrawal requests
  pending_withdrawals Decimal @default(0) @db.Decimal(10, 2)

  // One-to-one relation with Vendor
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @unique

  // One-to-many relation with VendorTransaction
  transactions        VendorTransaction[]
  // One-to-many relation with WithdrawalRequest
  withdrawal_requests WithdrawalRequest[]

  @@index([vendorId])
}

model VendorTransaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Amount of the transaction
  amount       Decimal
  // Transaction type (e.g., ORDER_PAYMENT, WITHDRAWAL, REFUND)
  type         TransactionType   @default(WITHDRAWAL)
  // Status of the transaction
  status       TransactionStatus @default(PENDING)
  // Reference to the related entity (order ID, withdrawal ID, etc.)
  reference_id String?
  // Additional transaction details
  description  String?

  // Many-to-one relation with VendorBalance
  vendor_balance    VendorBalance @relation(fields: [vendor_balance_id], references: [id])
  vendor_balance_id String

  @@index([vendor_balance_id])
  @@index([status])
  @@index([createdAt])
}

model WithdrawalRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Amount requested for withdrawal
  amount                Decimal                 @db.Decimal(10, 2)
  // Status of the withdrawal request
  status                WithdrawalStatus        @default(PENDING)
  // Payment method details (bank account, mobile money, etc.)
  payment_method        WithdrawalPaymentMethod @default(CHAPA)
  // Notes/comments (from vendor or admin)
  notes                 String?
  // When the withdrawal was processed
  processed_at          DateTime?
  // Transaction reference after processing
  transaction_reference String?

  // Many-to-one relation with VendorBalance
  vendor_balance    VendorBalance @relation(fields: [vendor_balance_id], references: [id])
  vendor_balance_id String

  @@index([vendor_balance_id])
  @@index([status])
  @@index([createdAt])
}

model Address {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  street     String
  city       String
  sub_city   String
  zip_code   String
  country    String
  latitude   Decimal?
  longitude  Decimal?
  is_default Boolean  @default(false)
  // type       AddressType

  // one vendor many addresses
  Vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId String?
  Order    Order[]
  User     User?   @relation(fields: [userId], references: [id])
  userId   String? @unique
}

model Category {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name      String
  slug      String         @unique
  image_url String?
  status    CategoryStatus @default(ACTIVE)

  // many to many relation product - category
  products Product[]
  // TODO: parent_id uuid [null, note: "For subcategories (e.g., \"Citrus\" under \"Fruits\")."]
}

model Product {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  name           String
  description    String
  price          Decimal
  discount_price Decimal?      @default(0)
  unit           String
  stock          Int
  image_url      String
  status         ProductStatus @default(ACTIVE)
  is_featured    Boolean       @default(false)

  // one vendor many products
  Vendor     Vendor      @relation(fields: [vendorId], references: [id])
  vendorId   String
  // many to many relation product - category
  categories Category[]
  OrderItems OrderItem[]
  CartItem   CartItem[]
}

model Cart {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  total_price Decimal    @default(0)
  status      CartStatus @default(ACTIVE)

  CartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  // multi-vendor marketplace, the checkout flow needs to split the cart by vendor, and create separate orders per vendor
  Order Order[]
}

model CartItem {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  price     Decimal
  quantity  Int
  sub_total Decimal

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  Cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  // NOTE: In a cart system, a user should not be able to add the same product twice to the cart as separate entries â€” instead, the quantity should just increase.
  @@unique([cartId, productId], name: "unique_cart_product")
}

model Order {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  total_price Decimal
  status      OrderStatus @default(PENDING)
  shippedAt   DateTime?
  deliveredAt DateTime?
  receivedAt  DateTime?

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @unique

  // ensures only one order can ever exist for a cart
  OrderItems OrderItem[]
  Payment    Payment?
  // one user may have many orders
  User       User        @relation(fields: [userId], references: [id])
  userId     String
  // one vendor may have many orders
  vendor     Vendor      @relation(fields: [vendorId], references: [id])
  vendorId   String
  // Shipping/delivery address. it should be one of the customers address else the default customer address
  Adress     Address     @relation(fields: [addressId], references: [id])
  addressId  String

  @@index([userId]) // Added index for better query performance
  @@index([vendorId]) // Added index for better query performance
  @@index([addressId]) // Added index for better query performance
}

model OrderItem {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Price per unit at purchase time.
  price     Decimal
  // Number of units ordered.
  quantity  Decimal
  // price * quantity.
  sub_total Decimal
  reviewed  Boolean @default(false)

  // one order may have many order items
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  // one order item will have one product
  Product   Product @relation(fields: [productId], references: [id])
  productId String

  Review Review?
}

model Payment {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  amount        Decimal
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  reference     String        @unique
  paidAt        DateTime?

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating  Int
  comment String?

  userId      String
  orderItemId String @unique

  User      User      @relation(fields: [userId], references: [id])
  OrderItem OrderItem @relation(fields: [orderItemId], references: [id])

  @@unique([userId, orderItemId], name: "unique_user_order_item")
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  DELETED
}

enum UserAccountVerifyStatus {
  UNVERIFIED
  REQUESTED
  VERIFIED
  DECLINED
}

enum AuthProvider {
  EMAIL
  GOOGLE
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
}

// enum AddressType {
//   BUSINESS
//   SHIPPING
// }

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum CartStatus {
  ACTIVE // Cart is in use, items can be added or removed
  CHECKED_OUT // Cart has been converted into an order
  ABANDONED // Cart was left without checkout
  EXPIRED // Cart was abandoned and expired after a certain period
}

enum OrderStatus {
  // Order has been placed but not yet processed
  PENDING
  // Order has been confirmed by the vendor
  CONFIRMED
  // Order has been shipped to the customer
  SHIPPED
  // Order has been successfully delivered
  DELIVERED
  // Order was canceled before fulfillment
  CANCELLED
  // Customer returned the order
  RETURNED
  // Payment has been refunded
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH_ON_DELIVERY
  STRIPE
  CHAPA
}

enum TransactionType {
  ORDER_PAYMENT // When a vendor receives payment from a completed order
  WITHDRAWAL // When a vendor withdraws money from their balance
  REFUND // When a refund is processed for an order
  ADJUSTMENT // For manual adjustments by admin
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// enum AccountStatus {
//   ACTIVE
//   INACTIVE
//   DELETED
// }

enum WithdrawalStatus {
  PENDING // Initial request
  APPROVED // Approved by admin
  PROCESSING // Being processed
  COMPLETED // Successfully transferred
  REJECTED // Rejected by admin
  CANCELLED // Cancelled by vendor
  FAILED // Transfer failed
}

enum WithdrawalPaymentMethod {
  BANK_TRANSFER
  MOBILE_MONEY
  CHAPA
  OTHER
}
